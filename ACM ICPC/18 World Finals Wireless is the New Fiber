#include <iostream>
#include <algorithm>

using namespace std;

int n,m;

const int N = 10010;
int degree[N];
pair<int,int> bdegree[N];

int p[N];

void init()
{
    for(int i = 0; i<n; i++) p[i] = i;
}

int find(int x)
{
    if(p[x] != x)
    {
        p[x] = find(p[x]);
    }
    return p[x];
}

void unite(int x, int y)
{
    x = find(x), y = find(y);
    if(x == y) return;
    p[y] = x;
}

bool same(int x, int y)
{
    return find(x) == find(y);
}

int main()
{
    
    cin>>n>>m;
    init();
    for(int i = 0; i<n; i++)
    {
        pair<int,int> p;
        p = {0,i};
        bdegree[i] = p;
    }
    
    for(int i = 0; i<m; i++)
    {
        int a,b;
        cin>>a>>b;
        degree[a] ++;
        degree[b] ++;
        bdegree[a].first ++;
        bdegree[b].first ++;
    }
    sort(bdegree, bdegree+n, greater<pair<int,int> > ());
    int ttd = 2*(n-1);
    int dif = 2*m-ttd;
    int cnt = 0;
    
    bool flag = true;
    if(dif == 0) cout<<0<<endl;
    else flag = false;
    while(dif)
    {
        if(bdegree[cnt].first > 1)
        {
            if(dif <= (bdegree[cnt].first - 1))
            {
                bdegree[cnt].first -= dif;
                dif = 0;
                break;
            }
            else
            {
                dif -= (bdegree[cnt].first - 1);
                bdegree[cnt].first = 1;
                cnt++;
            }
        }
        else continue;
    }
    if(!flag) cout<<cnt+1<<endl;
    cout<<n<<' '<<n-1<<endl;
    sort(bdegree, bdegree+n, greater<pair<int,int> > ());
   
    
      for(int i = 0; i<n; i++)
    {
        if(bdegree[i].first == 0) continue;
        for(int j = i+1; j<n; j++)
        {
            if(bdegree[j].first == 0) continue;
            if(bdegree[i].first == 0) break;
            if(same(bdegree[i].second, bdegree[j].second)) continue;
            cout<<bdegree[i].second<<' '<<bdegree[j].second<<endl;
            bdegree[i].first--;
            bdegree[j].first--;
            unite(bdegree[i].second, bdegree[j].second);
        }
    }
   
    
    
    
    return 0;
}
