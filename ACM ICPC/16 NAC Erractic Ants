#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>
#include <map>

using namespace std;

typedef pair<int,int> PII;

const int N = 150;

int n;
int h[N], ne[N], e[N], idx;
int dis[N];

void add(int a, int b)
{
    ne[idx] = h[a], e[idx] = b, h[a] = idx ++;
}

int bfs(int st, int ed)
{
    queue<int> q;
    dis[st] = 0;
    q.push(st);
    while(q.size())
    {
        int u = q.front();
        q.pop();
        for(int i = h[u]; i != -1; i = ne[i])
        {
            int j = e[i];
            if(dis[j] > dis[u] + 1)
            {
                dis[j] = dis[u] + 1;
                q.push(j);
            }
        }
    }
    return dis[ed];
}

int main()
{
    int T;
    cin>>T;
    while(T --)
    {
        cin>>n;
        idx = 0;
        memset(h, -1, sizeof(h));
        memset(ne, 0, sizeof(ne));
        memset(e, 0, sizeof(e));
        memset(dis, 0x3f, sizeof(dis));
        map<PII, int> node;
        int u, v;
        int x = 0, y = 0;
        int id = 0;
        for(int i = 1; i <= n; i++)
        {
            char c;
            cin>>c;
            if(c == 'W')
            {
                PII p1 = {x, y};
                PII p2 = {x, -- y};
                if(!node[p1]) node[p1] = ++ id;
                if(!node[p2]) node[p2] = ++ id;
                u = node[p1], v = node[p2];
                add(u, v), add(v, u);
            }
            if(c == 'E')
            {
                PII p1 = {x, y};
                PII p2 = {x, ++ y};
                if(!node[p1]) node[p1] = ++ id;
                if(!node[p2]) node[p2] = ++ id;
                u = node[p1], v = node[p2];
                add(u, v), add(v, u);
            }
            if(c == 'N')
            {
                PII p1 = {x, y};
                PII p2 = {-- x, y};
                if(!node[p1]) node[p1] = ++ id;
                if(!node[p2]) node[p2] = ++ id;
                u = node[p1], v = node[p2];
                add(u, v), add(v, u);
            }
            if(c == 'S')
            {
                PII p1 = {x, y};
                PII p2 = {++ x, y};
                if(!node[p1]) node[p1] = ++ id;
                if(!node[p2]) node[p2] = ++ id;
                u = node[p1], v = node[p2];
                add(u, v), add(v, u);
            }
        }
    
        int ans = bfs(node[{0, 0}], node[{x, y}]);
        cout<<ans<<endl;
    }
    
    
    
    return 0;
}
