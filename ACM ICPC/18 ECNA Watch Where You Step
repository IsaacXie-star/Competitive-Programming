#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

typedef long long LL;

const int N = 2510, M = N * N;

int n;
int a[N][N];
int low[N], dfn[N], timestamp, scc_cnt;
int id[N], stk[N], top, ssize[N];
int h[N], ne[M], e[M], idx;
LL prefsum[N];
bool in_stk[N];

void add(int a, int b)
{
    ne[idx] = h[a], e[idx] = b, h[a] = idx ++;
}

void tarjan(int u)
{
    low[u] = dfn[u] = ++ timestamp;
    stk[++ top] = u, in_stk[u] = true;
    for(int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u] = min(low[u], low[j]);
        }
        else if(in_stk[j]) low[u] = min(low[u], dfn[j]);
    }
    
    if(dfn[u] == low[u])
    {
        ++ scc_cnt;
        int y;
        do {
            y = stk[top --];
            in_stk[y] = false;
            id[y] = scc_cnt;
            ssize[scc_cnt] ++;
        } while(y != u);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    memset(h, -1, sizeof(h));
    cin>>n;
    LL ori = 0, ans = 0;
    for(int i = 1; i <= n; i ++)
        for(int j = 1; j <= n; j ++)
        {
            cin>>a[i][j];
            if(a[i][j]) add(i, j), ori ++;
        }
    
    for(int i = 1; i <= n; i ++)
        if(!dfn[i])
            tarjan(i);
    
    for(int i = 1; i <= scc_cnt; i ++)
    {
        LL m = ssize[i];
        ans += (LL)m * (m - 1);
    }
    for(int i = scc_cnt; i >= 1; i --)
        prefsum[i] = ssize[i] + prefsum[i + 1];
    
    for(int i = scc_cnt - 1; i >= 1; i --)
    {
        ans += (LL)ssize[i] * prefsum[i + 1];
    }
    
    ans -= ori;
    
    cout<<ans<<endl;
    
    return 0;
}
