#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <cmath>

using namespace std;

#define x first
#define y second

typedef pair<double, double> PDD;

const int N = 260, M = N * N;

PDD operator-(PDD a, PDD b)
{
    return {a.x - b.x, a.y - b.y};
}

struct Edge
{
    int u, v;
    double k;
} e[M];

struct compare
{
    bool operator() (Edge a, Edge b)
    {
        return a.k < b.k; 
    }
};

int n, cnt;
PDD pt[N];
int dp[N];

int main()
{
    cin >> n;
    for (int i = 1; i <= n; i ++) cin >> pt[i].x >> pt[i].y;
    
    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= n; j ++)
        {
            if (i == j) continue;
            e[cnt ++] = {i, j, atan2((pt[j] - pt[i]).y, (pt[j] - pt[i]).x)};
        }
        
    sort(e, e + cnt, compare());
    
    int res = 0;
    for (int i = 1; i <= n; i ++)
    {
        for (int j = 1; j <= n; j ++) dp[j] = -2e9;
        dp[i] = 0;
        for (int j = 0; j < cnt; j ++)
            dp[e[j].v] = max(dp[e[j].v], dp[e[j].u] + 1);
        res = max(res, dp[i]);
    }
    
    cout << res << endl;
    
    return 0;
}
