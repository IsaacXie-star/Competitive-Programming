#pragma GCC optimize(2)
#include <iostream>
#include <string>
#include <sstream>
#include <cmath>>
//#include <bits/stdc++.h>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <typeinfo>
#include <stack>
#include <set>
#include <math.h>
#include <stdlib.h>
#include <cctype>
#include <queue>
#include <bitset>
#include <array>

using namespace std;


int main()
{
   ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);
   bitset<1000001> check;
   int rows,columns;
   cin>>rows>>columns;
   int arr[rows+1][columns+1];
   int sizes = rows*columns;
   for(int x = 1; x<=rows; x++)
   {
       for(int y = 1; y<=columns; y++)
       {
           cin>>arr[x][y];
       }
   }
   int pathway[sizes] = {};
   int emptyspot = 0, currentat = 0;
   int target = sizes;
   pathway[emptyspot] = arr[1][1];
   check[arr[1][1]] = true;
   emptyspot++;
   int arrayxy;

   if(pathway[currentat] == target)
   {
       cout<<"yes"<<endl;
       return 0;
   }

  do
  {

   for(int x = 1; x<=rows; x++)
   {
       if(pathway[currentat] % x == 0)
       {
           for(int y = 1; y<=columns; y++)
       {
           arrayxy = arr[x][y];
           
           
           if(x*y == pathway[currentat])
           {
               if(arrayxy == target)
           {
               cout<<"yes"<<endl;
               return 0;
           }

               if(check[arrayxy] == false)
               {
                   pathway[emptyspot] = arrayxy;
                   emptyspot++;
                   check[arrayxy] = true;
               }
           }
           if(y+1 > (pathway[currentat]/x))
           {
               break;
           }
       }

       }
       
   }
   currentat ++;

  } while(pathway[currentat] != 0);

  cout<<"no"<<endl;
   return 0;
   }
