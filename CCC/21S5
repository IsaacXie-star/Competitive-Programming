#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

typedef long long LL;

const int N = 150010;

int gcd(int a, int b)
{
    return b ? gcd(b, a % b) : a;
}

int lcm(int a, int b)
{
    if(a == 0 || b == 0) return 0;
    return a * b / gcd(a, b);
}

struct Node
{
    int l, r;
    int tgcd, tlcm, lazy;
} tr[N * 4];

int n, m;
int x[N], y[N], z[N];

void pushdown(int u)
{
    auto &root = tr[u], &left = tr[u << 1], &right = tr[u << 1 | 1];
    if(root.lazy != 0)
    {
        if(left.tlcm == 0) left.tlcm = root.lazy;
        else left.tlcm = lcm(left.tlcm, root.lazy);
        if(right.tlcm == 0) right.tlcm = root.lazy;
        else right.tlcm = lcm(right.tlcm, root.lazy);
        
        left.tgcd = left.tlcm, right.tgcd = right.tlcm;
        left.lazy = left.tlcm, right.lazy = right.tlcm;
    }
    root.lazy = 0;
}

void pushup(int u)
{
    tr[u].tgcd = gcd(tr[u << 1].tgcd, tr[u << 1 | 1].tgcd);
}

void build(int u, int l, int r)
{
    if(l == r) tr[u] = {l, r, 0, 0, 0}; // 720720
    else
    {
        tr[u] = {l, r, 0, 0, 0};
        int mid = l + r >> 1;
        build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);
        pushup(u);
    }
}

void modify(int u, int l, int r, int d)
{
    if(tr[u].l >= l && tr[u].r <= r)
    {
        if(tr[u].tlcm == 0) tr[u].tlcm = d;
        else tr[u].tlcm = lcm(d, tr[u].tlcm);
        tr[u].tgcd = tr[u].tlcm;
        tr[u].lazy = lcm(d, tr[u].tlcm);
    }
    else
    {
        pushdown(u);
        int mid = tr[u].l + tr[u].r >> 1;
        if(l <= mid) modify(u << 1, l, r, d);
        if(r > mid) modify(u<< 1 | 1, l, r, d);
        pushup(u);
    }
}

LL query(int u, int l, int r)
{
    if(tr[u].l >= l && tr[u].r <= r) return tr[u].tgcd;
    pushdown(u);
    int mid = tr[u].l + tr[u].r >> 1;
    LL tgcd = 720720;
    if(l <= mid) tgcd = gcd(query(u << 1, l, r), tgcd);
    if(r > mid) tgcd = gcd(query(u << 1 | 1, l, r), tgcd);
    return tgcd;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin>>n>>m;
    
    build(1, 1, n);
    
    for(int i = 1; i <= m; i++) cin>>x[i]>>y[i]>>z[i], modify(1, x[i], y[i], z[i]);
    
    for(int i = 1; i <= m; i++)
    {
        int ngcd = query(1, x[i], y[i]);
        if(ngcd != z[i])
        {
            cout<<"Impossible"<<endl;
            return 0;
        }
    }
    
    for(int i = 1; i <= n; i++)
    {
        cout<<query(1, i, i)<<' ';
    }
    cout<<endl;
    
    
    return 0;
}
