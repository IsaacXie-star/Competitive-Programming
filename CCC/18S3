#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;

const int N = 410;

char g[N][N];
int dx[4] = {0,1,0,-1}, dy[4] = {1,0,-1,0};
bool vis[N][N];
int d[N][N];

int n,m;

bool modify(int x, int y)
{
    d[x][y] = -1;
    for(int i = y+1; i<m; i++)
    {
        if(g[x][i] == 'S') return false;
        if(g[x][i] == 'W')break;
        if(g[x][i] == '.') d[x][i] = -1;
    }
    for(int i = y-1; i>=0; i--)
    {
        if(g[x][i] == 'S') return false;
        if(g[x][i] == 'W')break;
        if(g[x][i] == '.') d[x][i] = -1;
    }
    for(int i = x+1; i<n; i++)
    {
        if(g[i][y] == 'S') return false;
        if(g[i][y] == 'W')break;
        if(g[i][y] == '.') d[i][y] = -1;
    }
    for(int i = x-1; i>=0; i--)
    {
        if(g[i][y] == 'S') return false;
        if(g[i][y] == 'W')break;
        if(g[i][y] == '.') d[i][y] = -1;
    }
    return true;
}

void bfs(int xs, int ys)
{
    queue<pair<int,int> > q;
    q.push({xs,ys});
    pair<int,int> p;
    while(q.size())
    {
        p = q.front();
        q.pop();
        int xn = p.first, yn = p.second;
        for(int i = 0; i<4; i++)
        {
            int nx = xn + dx[i], ny = yn + dy[i];
           
            if(nx >= 0 && ny >= 0 && nx < n && ny < m)
            {
                 if(g[xn][yn] == 'U' && !(dx[i] == -1 && dy[i] == 0)) continue;
                 if(g[xn][yn] == 'D' && !(dx[i] == 1 && dy[i] == 0)) continue;
                 if(g[xn][yn] == 'R' && !(dx[i] == 0 && dy[i] == 1)) continue;
                 if(g[xn][yn] == 'L' && !(dx[i] == 0 && dy[i] == -1)) continue;
            }
        
            if(nx >= 0 && ny >= 0 && nx < n && ny < m)
            {
                if(vis[nx][ny])
                {
                    if(d[nx][ny] != -1 && g[nx][ny] != 'W')
                    {
                        if(g[nx][ny] == '.' && d[nx][ny] > d[xn][yn] + 1)
                        {
                        d[nx][ny] = d[xn][yn] + 1;
                        q.push({nx,ny});
                        continue;
                        }
                        else if(g[nx][ny] == 'R' || g[nx][ny] == 'L' || g[nx][ny] == 'U' || g[nx][ny] == 'D')
                        {
                            if(d[nx][ny] > d[xn][yn])
                            {
                                d[nx][ny] = d[xn][yn];
                                q.push({nx,ny});
                                continue;
                            }
                            else continue;
                        }
                    }
                    else continue;
                }
                if(!vis[nx][ny]) vis[nx][ny] = true;

                if(g[nx][ny] == 'W' || d[nx][ny] == -1)continue;
                else if(g[nx][ny] == '.' && !d[nx][ny])
                {
                    d[nx][ny] = d[xn][yn] + 1;
                    q.push({nx,ny});
                }
                else if(g[nx][ny] == 'U' || g[nx][ny] == 'D' || g[nx][ny] == 'R' || g[nx][ny] == 'L')
                {
                    d[nx][ny] = d[xn][yn];
                    q.push({nx,ny});
                } 
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int xs,ys;
    cin>>n>>m;

    vector<pair<int,int> > cam = {};
    for(int i = 0; i<n; i++)
    {
        for(int j = 0; j<m; j++)
        {
            cin>>g[i][j];
            if(g[i][j] == 'S')xs = i, ys = j;
            else if(g[i][j] == 'C') cam.push_back({i,j});
        }
    }
    
    bool flag = true;
    
    for(auto c : cam)
    {
        if(!modify(c.first, c.second))
        {
           flag = false;
        }
    }
    if(flag)
    {
        bfs(xs, ys);

    for(int i = 0; i<n; i++)
    {
        for(int j = 0; j<m; j++)
        {
            if(g[i][j] == '.' && (d[i][j] == 0||d[i][j] == -1))
            {
                cout<<-1<<endl;
            }
            else if(g[i][j] == '.' && d[i][j])
            {
                cout<<d[i][j]<<endl;
            }
        }
    }
    }
    else
    {
        for(int i = 0; i<n; i++)
        {
            for(int j = 0; j<m; j++)
            {
                if(g[i][j] == '.')
                {
                    cout<<-1<<endl;
                }
            }
        }
    }
    
    return 0;
}
