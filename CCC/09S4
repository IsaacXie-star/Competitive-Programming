#include <iostream>
#include <algorithm>
#include <cstring>
#include <map>
#include <set>
#include <queue>

using namespace std;

typedef pair<int,int> PII;

const int N = 5001;

int n,m,k,rt;
int G[N][N];
int pencil_cost[N], dist[N];
bool vis[N];


void dijkstra()
{
    memset(dist, 0x3f, sizeof(dist));
    dist[rt] = 0;
    for(int i = 0; i < n; i++)
    {
        int t = -1;
        for(int j = 1; j <= n; j ++)
            if(!vis[j] && (t == -1 || dist[t] > dist[j])) t = j;
        
        vis[t] = true;
        for(int j = 1; j <=n; j++)
            dist[j] = min(dist[j], dist[t] + G[t][j]);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    memset(pencil_cost, -1, sizeof(pencil_cost));
    memset(G, 0x3f, sizeof(G));
    cin>>n>>m;
    for(int i = 1; i<=m; i++)
    {
        int a, b, c;
        cin>>a>>b>>c;
        G[a][b] = c;
        G[b][a] = c;
    }
    cin>>k;
    for(int i = 1; i<=k; i++)
    {
        int z, pz;
        cin>>z>>pz;
        pencil_cost[z] = pz;
    }
    cin>>rt;
    dijkstra();
    int res = 2e9;
    for(int i = 1; i <= n; i++)
        if(pencil_cost[i] != -1)
        {
            res = min(res, pencil_cost[i] + dist[i]);
        }
        
    cout<<res<<endl;
    
    
    return 0;
}
