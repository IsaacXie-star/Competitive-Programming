#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

typedef long long LL;

const int N = 5010;

int n, m;
char s[N];
LL x[N], y[N], sa[N], c[N], rk[N], height[N]; 

void get_sa()
{
    for(int i = 1; i <= n; i++) c[x[i] = (int)s[i]] ++;
    for(int i = 2; i <= m; i++) c[i] += c[i-1];
    for(int i = n; i >= 1; i--) sa[c[x[i]] --] = i;
    for(int k = 1; k <= n; k <<= 1)
    {
        int num = 0;
        for(int i = n - k + 1; i <= n; i++) y[++ num] = i;
        for(int i = 1; i <= n; i++) 
            if(sa[i] > k)
                y[++ num] = sa[i] - k;
        for(int i = 1; i <= m; i++) c[i] = 0;
        for(int i = 1; i <= n; i++) c[x[i]] ++;
        for(int i = 1; i <= m; i++) c[i] += c[i-1];
        for(int i = n; i >= 1; i--) sa[c[x[y[i]]] --] = y[i], y[i] = 0;
        swap(x, y);
        x[sa[1]] = 1, num = 1;
        for(int i = 2; i <= n; i++)
            x[sa[i]] = (y[sa[i]] == y[sa[i-1]] && y[sa[i] + k] == y[sa[i-1] + k]) ? num : ++ num;
        if(n == num) break;
        m = num;
    }
}

void get_height()
{
    for(int i = 1; i <= n; i++) rk[sa[i]] = i;
    for(int i = 1, k = 0; i <= n; i ++)
    {
        if(rk[i] == 1) continue;
        if(k) k --;
        int j = sa[rk[i] - 1];
        while(i + k <= n && j + k <= n && s[i + k] == s[j + k]) k++;
        height[rk[i]] = k;
    }
}

int main()
{
    int T;
    cin>>T;
    while(T --)
    {
        string t;
        cin>>t;
        n = t.size(), m = 128;
        for(int i = 1; i <= n; i++) s[i] = t[i-1];
        for(int i = 1; i <= m; i++) c[i] = 0;
        get_sa();
        get_height();
        LL res = 0;
        for(int i = 1; i <= n; i++)
        {
            int subs = sa[i];
            if(n - subs + 1 > height[i])
            {
                res += (n - subs + 1 - height[i]);
            }
        }
        res ++;
        cout<<res<<endl;
    }
    
    return 0;
}
