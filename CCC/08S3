#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>

using namespace std;

const int N = 25;

typedef pair<int,int> PII;

int r,c;
char w[N][N];
int d[N][N];
bool vis[N][N];

void bfs()
{
    d[1][1] = 1;
    queue<PII> q;
    q.push({1,1});
    while(q.size())
    {
        auto t = q.front();
        int x = t.first, y = t.second;
        //vis[x][y] = true;
        q.pop();
        if(w[x][y] == '+')
        {
            int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};
            for(int i = 0; i<4; i++)
            {
                int nx = x + dx[i], ny = y+dy[i];
                if(nx >= 1 & nx <= r && ny >= 1 && ny <= c && d[nx][ny] == -1 && w[nx][ny] != '*')
                {
                    d[nx][ny] = d[x][y] + 1;
                    q.push({nx,ny});
                }
            }
        }
        else if(w[x][y] == '|')
        {
            int dx[2] = {1,-1}, dy[2] = {0,0};
            for(int i = 0; i<2; i++)
            {
                int nx = x + dx[i], ny = y+dy[i];
                if(nx >= 1 & nx <= r && ny >= 1 && ny <= c && d[nx][ny] == -1 && w[nx][ny] != '*')
                {
                    d[nx][ny] = d[x][y] + 1;
                    q.push({nx,ny});
                }
            }
        }
        else if(w[x][y] == '-')
        {
            int dx[2] = {0,0}, dy[2] = {1,-1};
            for(int i = 0; i<2; i++)
            {
                int nx = x + dx[i], ny = y+dy[i];
                if(nx >= 1 & nx <= r && ny >= 1 && ny <= c && d[nx][ny] == -1 && w[nx][ny] != '*')
                {
                    d[nx][ny] = d[x][y] + 1;
                    q.push({nx,ny});
                }
            }
            
        }
    }
    
}

int main()
{
    int t;
    cin>>t;
    while(t --)
    {
        //memset(vis, false, sizeof(vis));
        memset(d, -1, sizeof(d));
        cin>>r>>c;
        for(int i = 1; i<=r; i++)
            for(int j = 1; j<=c; j++)
                cin>>w[i][j];
                
        bfs();
        cout<<d[r][c]<<endl;
    }
    
    
    
    return 0;
}
