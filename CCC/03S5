#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

const int N = 10010, M = 100010;

struct Edge 
{
    int u, v, w;
    
} G[M];

int c, r, d, res;
int fa[N];
int h[N], ne[M], e[M], w[M], idx;
vector<Edge> tr;
bool des[N];
bool vis[N];

void init()
{
    for(int i = 0; i <= c; i++) fa[i] = i;
    memset(h, -1, sizeof(h));
    res = 2e9;
}

void add(int a, int b, int c)
{
    ne[idx] = h[a], e[idx] = b, w[idx] = c, h[a] = idx++;
}

struct compare
{
    bool operator() (Edge A, Edge B)
    {
        return A.w > B.w;
    }
};

int find(int x)
{
    if(fa[x] != x)
    {
        fa[x] = find(fa[x]);
    }
    return fa[x];
}

void unite(int x, int y)
{
    x = find(x), y = find(y);
    if(x == y) return ;
    fa[y] = x;
}

void dfs(int u, int min_weight)
{
    if(des[u])
    {
        res = min(res, min_weight);
    }
    for(int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if(!vis[j])
        {
            vis[j] = true;
            dfs(j, min(min_weight, w[i]));
        }
    }
    return;
}

int main()
{
    cin>>c>>r>>d;
    init();
    for(int i = 1; i <= r; i++)
    {
        int x, y, ww;
        cin>>x>>y>>ww;
        Edge e;
        e = {x, y, ww};
        G[i] = e;
    }
    sort(G + 1, G + r + 1, compare());
    for(int i = 1; i <= r; i ++)
    {
        Edge e = G[i];
        int u, v;
        u = e.u, v = e.v;
        u = find(u), v = find(v);
        if(u != v)
        {
            unite(u, v);
            tr.push_back(e);
        }
    }
    
    
    for(int i = 1; i <= d; i ++)
    {
        int x;
        cin>>x;
        des[x] = true;
    }
    
    for(int i = 0; i < tr.size(); i ++)
    {
        Edge e;
        e = tr[i];
        int u = e.u, v = e.v, ww = e.w;
        add(u, v, ww), add(v, u, ww);
    }
    
    vis[1] = true;
    dfs(1, 2e9);
    
    cout<<res<<endl;
    
    
    return 0;
}
