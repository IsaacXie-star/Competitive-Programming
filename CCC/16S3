#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>

using namespace std;

const int N = 100010, M = N * 2;

int n, m;
int a[N], deg[N];
bool viet[N];
bool vis[N];
int dump[N];
int h[N], ne[M], e[M], idx, cnt;
int d;
int d1[N], d2[N];
int du, dv;

void add(int a, int b)
{
    ne[idx] = h[a], e[idx] = b, h[a] = idx++;
}

void bfs()
{
    cnt = 0;
    queue<int> q;
    for(int i = 1; i<=n; i++)
        if(deg[i] == 1 && !viet[i])
            q.push(i), dump[cnt++] = i;
            
    while(q.size())
    {
        int t = q.front();
        q.pop();
        for(int i = h[t]; i != -1; i = ne[i])
        {
            int j = e[i];
            deg[j] --;
            if(deg[j] == 1 && !viet[j])
            {
                q.push(j);
                dump[cnt++] = j;
            }
        }
    }
}

void dfs1(int u)
{
    for(int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if(!vis[j])
        {
            vis[j] = true;
            d1[j] = d1[u] + 1;
            if(d < d1[j]) d = d1[j], du = j;
            dfs1(j);
        }
    }
}

void dfs2(int u)
{
    for(int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if(!vis[j])
        {
            vis[j] = true;
            d2[j] = d2[u] + 1;
            if(d < d2[j]) d = d2[j], dv = j;
            dfs2(j);
        }
    }
}

int main()
{
    memset(h, -1, sizeof(h));
    cin>>n>>m;
    for(int i = 1; i<=m; i++) cin>>a[i], a[i]++,  viet[a[i]] = true;
    for(int i = 1; i<n; i++)
    {
        int a, b;
        cin>>a>>b;
        a++, b++;
        add(a, b), add(b, a);
        deg[a]++, deg[b]++;
    }
    bfs();
    int left = n - cnt;
    int tt = 2 * (left - 1);
    for(int i = 0; i<cnt; i++)
        vis[dump[i]] = true;
        
    int root = -1;
    for(int i = 1; i<=n; i++)
        if(!vis[i])
        {
            root = i;
            break;
        }
    
    vis[root] = true;
    dfs1(root);
    memset(vis, false, sizeof(vis));
    for(int i = 0; i<cnt; i++)
        vis[dump[i]] = true;
        
    vis[du] = true;
    d = 0;
    dfs2(du);
    
    tt -= d;
    
    cout<<tt<<endl;
    
    return 0;
}
