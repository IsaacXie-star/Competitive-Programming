#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 110;

int n, id;
int a[N][N];

int get_id()
{
    int res = -1;
    for(int i = 1; i <=n; i++)
    {
        bool found = true;
        for(int j = 1; j <=n; j++)
        {
            if(a[i][j] != j || a[j][i] != j)
            {
                found = false;
                break;
            }
        }
        if(found)
        {
            res = i;
            break;
        }
    }
    return res;
}

bool check_associativity()
{
    for(int x = 1; x <= n; x++)
        for(int y = 1; y <= n; y++)
            for(int z = 1;  z <=n; z++)
            {
                if(a[x][a[y][z]] != a[a[x][y]][z])
                {
                    return false;
                }
            }
            
    return true;
}

bool check_inverse()
{
    for(int i = 1; i <=n; i++)
    {
        bool found = false;
        for(int j = 1; j <=n; j++)
        {
            if(a[i][j] == id && a[j][i] == id)
            {
                found = true;
                break;
            }
        }
        if(!found) return false;
    }
    return true;
}

int main()
{
    while(cin>>n, n)
    {
        for(int i = 1; i<=n; i++)
            for(int j = 1; j <=n; j++)
                cin>>a[i][j];
                
        id = get_id();
        if(id == -1)
        {
            cout<<"no"<<endl;
            continue;
        }
        if(!check_associativity())
        {
            cout<<"no"<<endl;
            continue;
        }
        if(!check_inverse())
        {
            cout<<"no"<<endl;
            continue;
        }
        cout<<"yes"<<endl;
    }
    
    
    return 0;
}
