#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
#include <iomanip>
#include <queue>

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;

const int N = 200010;

int n, m, ops;
int h[N], ne[N], e[N], idx, d2[N];
int sts[N];
bool vis[N];
int w[N];
struct Node
{
    int l, r;
    LL tmin;
} tr[N * 4];

void add(int a, int b)
{
    ne[idx] = h[a], e[idx] = b, h[a] = idx++;
}

void dijkstra(int d[], int root)
{
    memset(vis, false ,sizeof(vis));
    for(int i = 0; i <= n; i ++) d[i] = 1e9;
    d[root] = 0;
    priority_queue<PII, vector<PII>, greater<PII> > pque;
    pque.push({0, root});
    while(pque.size())
    {
        auto t = pque.top();
        pque.pop();
        int v = t.second, dis = t.first;
        if(vis[v]) continue;
        vis[v] = true;
        for(int i = h[v]; i != -1; i = ne[i])
        {
            int j = e[i];
            if(d[j] > dis + 1)
            {
                d[j] = dis + 1;
                pque.push({d[j], j});
            }
        }
    }
}

void pushup(int u)
{
    tr[u].tmin = min(tr[u << 1].tmin, tr[u << 1 | 1].tmin);
}

void build(int u, int l, int r)
{
    tr[u].l = l, tr[u].r = r;
    if(l == r)
    {
        tr[u].tmin = w[r];
        return ;
    }
    int mid = (l + r) >> 1;
    build(u << 1, l, mid), build(u << 1 | 1, mid+1, r);
    pushup(u);
}

LL query(int u, int l, int r)
{
    if(tr[u].l >= l && tr[u].r <= r) return tr[u].tmin;
    int mid = (tr[u].l + tr[u].r) >> 1;
    LL v = 2e9;
    if(l <= mid) v = query(u << 1, l, r);
    if(r > mid) v = min(v, query(u << 1 | 1, l, r));
    return v;
}

void modify(int u, int x, LL v)
{
    if(tr[u].l == x && tr[u].r == x) tr[u].tmin = v;
    else
    {
        int mid = (tr[u].l + tr[u].r) >> 1;
        if(x <= mid) modify(u << 1, x, v);
        else modify(u << 1 | 1, x, v);
        pushup(u);
    }
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    memset(h, -1, sizeof(h));
    cin>>n>>m>>ops;
    for(int i = 1; i <= m; i++)
    {
        int u, v;
        cin>>u>>v;
        add(v, u);
    }
    for(int i = 1; i <= n; i++) cin>>sts[i];

    dijkstra(d2, n);

    for(int i = 1; i <= n; i++)
    {
        int j = sts[i];
        w[j] = (LL)i-1+d2[j];
    }
        
    build(1, 1, n);
    
    while(ops --)
    {
        int xi, yi;
        cin>>xi>>yi;
        int j1 = sts[xi], j2 = sts[yi];
        modify(1, j1, yi-1+d2[j1]);
        modify(1, j2, xi-1+d2[j2]);
        swap(sts[xi], sts[yi]);
        LL res = query(1, 1, n);

        cout<<res<<endl;
    }
    
    return 0;
}
