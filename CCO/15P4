#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <unordered_map>
#include <queue>

using namespace std;

const int N = 2002, M = N * N * 5;

int n, m;
char a[N][N];
int h[M], ne[M], e[M], idx; 
int ind[M]; 
int cars[M], cnt;
int topoq[M];

void add(int a, int b)
{
    ne[idx] = h[a], e[idx] = b, h[a] = idx ++;
}

int getnode(int i, int j)
{
    return m * i + j;
}

pair<int,int> getcoor(int x)
{
    return {x / m, x % m};
}

void toposort()
{
    queue<int> q;
    for (int i = 1; i <= cnt; i ++)
        if (ind[cars[i]] == 0)
            q.push(cars[i]);
    
    int idx = 0;       
    while (q.size())
    {
        int t = q.front();
        q.pop();
        topoq[++ idx] = t;
        for (int i = h[t]; i != -1; i = ne[i])
        {
            int j = e[i];
            ind[j] --;
            if (ind[j] == 0)
                q.push(j);
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    memset(h, -1, sizeof(h));
    cin >> n >> m;
    for (int i = 0; i < n; i ++)
        for (int j = 0; j < m; j ++)
            cin >> a[i][j];
            
    // build graph
    // pointing right
    for (int i = 0; i < n; i ++)
    {
        int prenode = -1;
        for (int j = 0; j < m; j ++)
            if (a[i][j] != '.')
            {
                int t = getnode(i, j);
                if (a[i][j] == 'E')
                {
                    if (prenode == -1) prenode = t;
                    else add(prenode, t), prenode = t, ind[t] ++;
                }
                else
                {
                    if (prenode != -1) add(prenode, t), ind[t] ++;
                }
            }
    }
    for (int i = 0; i < n; i ++)
    {
        int prenode = -1;
        for (int j = m - 1; j >= 0; j --)
            if (a[i][j] != '.')
            {
                int t = getnode(i, j);
                if (a[i][j] == 'W')
                {
                    if (prenode == -1) prenode = t;
                    else add(prenode, t), prenode = t, ind[t] ++;
                }
                else
                {
                    if (prenode != -1) add(prenode, t), ind[t] ++;
                }
            }
    }
    for (int j = 0; j < m; j ++)
    {
        int prenode = -1;
        for (int i = 0; i < n; i ++)
            if (a[i][j] != '.')
            {
                int t = getnode(i, j);
                if (a[i][j] == 'S')
                {
                    if (prenode == -1) prenode = t;
                    else add(prenode, t), prenode = t, ind[t] ++;
                }
                else
                {
                    if (prenode != -1) add(prenode, t), ind[t] ++;
                }
            }
    }
    for (int j = 0; j < m; j ++)
    {
        int prenode = -1;
        for (int i = n - 1; i >= 0; i --)
            if (a[i][j] != '.')
            {
                int t = getnode(i, j);
                if (a[i][j] == 'N')
                {
                    if (prenode == -1) prenode = t;
                    else add(prenode, t), prenode = t, ind[t] ++;
                }
                else
                {
                    if (prenode != -1) add(prenode, t), ind[t] ++;
                }
            }
    }
    // graph built
    for (int i = 0; i < n; i ++)
        for (int j = 0; j < m; j ++)
            if (a[i][j] != '.')
                cars[++ cnt] = getnode(i, j);
                
    toposort();
    
    for (int i = cnt; i >= 1; i --)
    {
        pair<int,int> p = getcoor(topoq[i]);
        cout << "(" << p.first << "," << p.second << ")" << endl;
    }
    
    
    return 0;
}
