#include <iostream>
#include <algorithm>
#include <cstring>
#include <unordered_map>
#include <map>
#include <set>
#include <vector>

using namespace std;

const int N = 1000010;

struct Ops
{
    char op;
    int id, rate;
} ops[N];

int n;
unordered_map<int,int> mp1;
int mp2[N];
unordered_map<int,int> mp3;
int tr[N];

int lowbit(int x)
{
    return x & (-x);
}

void add(int x, int c)
{
    for(int i = x; i < N; i += lowbit(i)) tr[i] += c;
}

int sum(int x)
{
    int res = 0;
    for(int i = x; i; i -= lowbit(i)) res += tr[i];
    return res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    vector<int> rating = {};
    cin>>n;
    char op;
    int id, rate, k;
    Ops oper;
    for(int i = 1; i <= n; i++)
    {
        cin>>op;
        if(op == 'N')
        {
            cin>>id>>rate;
            rating.emplace_back(rate);
            oper = {op, id, rate};
            ops[i] = oper;
        }
        else if(op == 'M')
        {
            cin>>id>>rate;
            rating.emplace_back(rate);
            oper = {op, id, rate};
            ops[i] = oper;
        }
        else
        {
            cin>>k;
            oper = {op, k, -1};
            ops[i] = oper;
        }
    }
    sort(rating.begin(), rating.end());
    int idx = 0;
    for(int i = 0; i < rating.size(); i++)
        if(mp3.find(rating[i]) == mp3.end())
            mp3[rating[i]] = ++idx;
     
    int cnt = 0;      
    for(int i = 1; i <= n; i++)
    {
        oper = ops[i];
        if(oper.op == 'N')
        {
            id = oper.id, rate = oper.rate;
            rate = mp3[rate];
            mp1[id] = rate;
            mp2[rate] = id;
            add(rate, 1);
            cnt++;
        }
        else if(oper.op == 'M')
        {
            id = oper.id, rate = oper.rate;
            rate = mp3[rate];
            int orate = mp1[id];
            mp1[id] = rate;
            mp2[rate] = id;
            add(orate, -1);
            add(rate, 1);
        }
        else if(oper.op == 'Q')
        {
            k = oper.id;
            int l = 0, r = N-5;
            while(l < r)
            {
                int mid = l + r >> 1;
                if(cnt - sum(mid) > (k-1)) l = mid + 1;
                else r = mid;
            }
            id = mp2[r];
            cout<<id<<endl;
        }
    }
        
    
    return 0;
}
