#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>

using namespace std;

const int N = 100010;

typedef pair<int,int> PII;

int n;
int a[N];
int dis[N][85];
int rs, cs, re, ce;
int dx[4] = {1, 0, -1, 0}, dy[4] = {0, -1, 0, 1};

int bfs(int x, int y)
{
    queue<PII> q;
    q.push({x, y});
    dis[x][y] = 0;
    while(q.size())
    {
        PII t = q.front();
        q.pop();
        int tx = t.first, ty = t.second;
        for(int i = 0; i<4; i++)
        {
            int nx = tx + dx[i], ny = ty + dy[i];
            if(nx > n || nx == 0) continue;
            if(ny > a[nx] && nx == n && dy[i] == 1) continue;
            if(ny == 0 && nx == 1) continue;
            if(ny > a[nx] && nx < n && dy[i] == 1) ny = 1, nx += 1;
            else if(ny == 0 && nx > 1 && dy[i] == -1) ny = a[nx-1], nx -= 1;
            else if(ny > a[nx] && nx <= n && dx[i] == 1) ny = a[nx];
            else if(ny > a[nx] && nx >= 1 && dx[i] == -1) ny = a[nx];
            
            if(dis[nx][ny] > dis[tx][ty] + 1)
            {
                dis[nx][ny] = dis[tx][ty] + 1;
               
                q.push({nx, ny});
            }
        }
    }
    
    return dis[re][ce];
}

int main()
{
    cin>>n;
    for(int i = 1; i<=n; i++) cin>>a[i];
    memset(dis, 0x3f, sizeof(dis));
    cin>>rs>>cs>>re>>ce;
    int ans = bfs(rs, cs);
    
    cout<<ans<<endl;
    
    return 0;
}
