#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

typedef long long LL;

#define x first
#define y second

typedef pair<int,int> PII;

const int N = 20010;
const LL INF = 1e15;

int n;
LL dp[N][2];
PII r[N]; 

int main()
{
    cin>>n;
    for(int i = 1; i <= n; i ++)
    {
        int a, b;
        cin>>a>>b;
        r[i].x = a, r[i].y = b; 
    }
    
    for(int i = 1; i <= n; i ++)
        for(int j = 0; j < 2; j ++)
            dp[i][j] = INF;
    
    dp[1][0] = 2 * r[1].y - r[1].x - 1;
    dp[1][1] = r[1].y - 1;
    
    
    for(int i = 2; i <= n; i ++)
    {
        if(r[i].x >= r[i - 1].y) 
        {
            dp[i][0] = min(dp[i - 1][0] + 2*r[i].y - r[i - 1].x - r[i].x + 1, dp[i - 1][1] + 2*r[i].y - r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i].y - r[i - 1].x + 1, dp[i - 1][1] + r[i].y - r[i - 1].y + 1);
        }
        if(r[i].y > r[i - 1].y && r[i].x < r[i - 1].y && r[i].x >= r[i - 1].x)
        {
            dp[i][0] = min(dp[i - 1][0] + 2*r[i].y - r[i - 1].x - r[i].x + 1, dp[i - 1][1] + 2*r[i].y - r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i].y - r[i - 1].x + 1, dp[i - 1][1] + r[i].y + r[i - 1].y - 2 * r[i].x + 1);
        }
        if(r[i].y <= r[i - 1].y && r[i].x >= r[i - 1].x)
        {
            dp[i][0] = min(dp[i - 1][0] + 2*r[i].y - r[i - 1].x - r[i].x + 1, dp[i - 1][1] + r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i].y - r[i - 1].x + 1, dp[i - 1][1] + r[i].y + r[i - 1].y -2*r[i].x + 1);
        }
        if(r[i].y > r[i - 1].y && r[i].x < r[i - 1].x)
        {
            dp[i][0] = min(dp[i - 1][0] + 2*r[i].y - r[i - 1].x - r[i].x + 1, dp[i - 1][1] + 2*r[i].y - r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i - 1].x + r[i].y - 2*r[i].x + 1, dp[i - 1][1] + r[i].y + r[i - 1].y + 2 * r[i].x + 1);
        }
        if(r[i].y > r[i - 1].x && r[i].x < r[i - 1].x && r[i].y <= r[i - 1].y)
        {
            dp[i][0] = min(dp[i - 1][0] + 2*r[i].y - r[i - 1].x - r[i].x + 1, dp[i - 1][1] + r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i].y + r[i - 1].x - 2*r[i].x + 1, dp[i - 1][1] + r[i].y + r[i - 1].y - 2*r[i].x + 1);
        }
        if(r[i].y <= r[i - 1].x)
        {
            dp[i][0] = min(dp[i - 1][0] + r[i - 1].x - r[i].x + 1, dp[i - 1][1] + r[i - 1].y - r[i].x + 1);
            dp[i][1] = min(dp[i - 1][0] + r[i - 1].x + r[i].y - 2*r[i].x + 1, dp[i - 1][1] + r[i - 1].y + r[i].y - 2*r[i].x + 1);
        }
    }
    LL res = min(dp[n][0] + n - r[n].x, dp[n][1] + n - r[n].y);
    
    cout<<res<<endl;
    
    return 0;
}
