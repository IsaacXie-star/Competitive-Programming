#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <cmath>
#include <iomanip>

using namespace std;

typedef pair<double, double> PDD;

#define x first
#define y second

const int N = 760;

struct Edge
{
    int a, b;
    int u, v;
    double w;
} edges[N * N];

int n, m, cnt, idx;
int fa[N];
PDD pos[N];
int id[N];
vector<int> groups[N];
int cogroup[N];
double res;
vector<Edge> ans;

double get_dist(PDD a, PDD b)
{
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

int find(int x)
{
    if (x != fa[x]) fa[x] = find(fa[x]);
    return fa[x];
}

bool cmp(Edge a, Edge b)
{
    return a.w < b.w;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout << fixed << setprecision(2);
    cin >> n;
    for (int i = 1; i <= n; i ++) fa[i] = i;   
    for (int i = 1; i <= n; i ++) cin >> pos[i].x >> pos[i].y;
    cin >> m;
    for (int i = 1; i <= m; i ++)
    {
        int a, b;
        cin >> a >> b;
        a = find(a), b = find(b);
        if (a != b) fa[b] = a;
    }
    for (int i = 1; i <= n; i ++) fa[i] = find(i);
    for (int i = 1; i <= n; i ++)
        if (i == fa[i]) id[++ cnt] = i, cogroup[i] = cnt;
    for (int i = 1; i <= n; i ++) groups[cogroup[find(i)]].push_back(i);
    res = 0;
    for (int i = 1; i <= cnt; i ++)
        for (int j = i + 1; j <= cnt; j ++)
        {
            int len1 = groups[i].size(), len2 = groups[j].size();
            int a = -1, b = -1;
            double d = 2e9;
            for (int ii = 0; ii < len1; ii ++)
                for (int jj = 0; jj < len2; jj ++)
                {
                    int u = groups[i][ii], v = groups[j][jj];
                    double dist = get_dist(pos[u], pos[v]);
                    if (dist < d) d = dist, a = u, b = v;
                }
            edges[idx ++] = {i, j, a, b, d};
        }
    sort(edges, edges + idx, cmp);
    for (int i = 1; i <= cnt; i ++) fa[i] = i;
    for (int i = 0; i < idx; i ++)
    {
        int a = edges[i].a, b = edges[i].b;
        double d = edges[i].w;
        a = find(a), b = find(b);
        if (a != b)
        {
            fa[b] = a;
            res += d;
            ans.push_back(edges[i]);
        }
    }
    cout << res << endl;
    for (int i = 0; i < ans.size(); i ++) cout << ans[i].u << ' ' << ans[i].v << endl;
    
    return 0;
}
